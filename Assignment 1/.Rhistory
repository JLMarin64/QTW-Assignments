options(digits = 2)
txt = readLines("offline.final.trace.txt")
#use substr function to locate lines that begin with # and tally them
sum(substr(txt, 1, 1) == "#")
paste("Number of lines that begin with #: ",sum(substr(txt, 1, 1) == "#"))
paste("Number of lines in offline file: ",length(txt))
#####################################
##    Begin data cleaning step     ##
#####################################
# evaluate how semi-colon splits 4th line of data file (first line that's not a comment)
print("Output of strsplit on 4th line below")
strsplit(txt[4], ";")[[1]]
# split data at a ; or = or , character
tokens = strsplit(txt[4], "[;=,]")[[1]]
# print first 10 elements of variable, tokens that give info about handheld device
tokens[1:10]
# extract values of the variables
tokens[c(2, 4, 6:8, 10)]
# review remaining values in split vector
tokens[ - ( 1:10 ) ]
# create matrix
tmp = matrix(tokens[ - (1:10) ], ncol = 4, byrow = TRUE)
mat = cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp),
ncol = 6, byrow = TRUE),
tmp)
# confirm dimensions of matrix
dim(mat)
# create function processLine to repeat for all rows in txt
processLine =
function(x)
{
tokens = strsplit(x, "[;=,]")[[1]]
tmp = matrix(tokens[ - (1:10) ], ncol = 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp),
ncol = 6, byrow = TRUE), tmp)
}
# apply function to txt
tmp = lapply(txt[4:20], processLine)
# determine # of signals detected at each point
sapply(tmp, nrow)
# create offline dataframe
offline = as.data.frame(do.call("rbind", tmp))
dim(offline)
# discard lines beginning with # because they are comments
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
# revised function to discard observations with no signal detected
processLine = function(x)
{
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], , 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
options(error = recover, warn = 1)
tmp = lapply(lines, processLine)
getwd
getwd()
setwd("Documents/4-Spring19/QTW/Unit 2 Case Study/QTW-Assignments/Assignment 1")
options(digits = 2)
txt = readLines("offline.final.trace.txt")
#use substr function to locate lines that begin with # and tally them
sum(substr(txt, 1, 1) == "#")
paste("Number of lines that begin with #: ",sum(substr(txt, 1, 1) == "#"))
paste("Number of lines in offline file: ",length(txt))
#####################################
##    Begin data cleaning step     ##
#####################################
# evaluate how semi-colon splits 4th line of data file (first line that's not a comment)
print("Output of strsplit on 4th line below")
strsplit(txt[4], ";")[[1]]
# split data at a ; or = or , character
tokens = strsplit(txt[4], "[;=,]")[[1]]
# print first 10 elements of variable, tokens that give info about handheld device
tokens[1:10]
# extract values of the variables
tokens[c(2, 4, 6:8, 10)]
# review remaining values in split vector
tokens[ - ( 1:10 ) ]
# create matrix
tmp = matrix(tokens[ - (1:10) ], ncol = 4, byrow = TRUE)
mat = cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp),
ncol = 6, byrow = TRUE),
tmp)
# confirm dimensions of matrix
dim(mat)
# create function processLine to repeat for all rows in txt
processLine =
function(x)
{
tokens = strsplit(x, "[;=,]")[[1]]
tmp = matrix(tokens[ - (1:10) ], ncol = 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp),
ncol = 6, byrow = TRUE), tmp)
}
# apply function to txt
tmp = lapply(txt[4:20], processLine)
# determine # of signals detected at each point
sapply(tmp, nrow)
# create offline dataframe
offline = as.data.frame(do.call("rbind", tmp))
dim(offline)
# discard lines beginning with # because they are comments
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
# revised function to discard observations with no signal detected
processLine = function(x)
{
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], , 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
options(error = recover, warn = 1)
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors = FALSE)
dim(offline)
## code block 2
dim(offline)
# name variables
names(offline) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal",
"channel", "type")
# convert time, position, signal to numeric
numVars = c("time", "posX", "posY", "posZ",
"orientation", "signal")
offline[ numVars ] =  lapply(offline[ numVars ], as.numeric)
# drop adhoc measurements
offline = offline[ offline$type == "3", ]
# remove type variable from df offline
offline = offline[ , "type" != names(offline) ]
# 1181628 in old offline, 978443 records left
dim(offline)
# convert milliseconds to date-times
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
## code block 3
# check variable types
unlist(lapply(offline, class))
summary(offline[, numVars])
# convert character variables to factors
summary(sapply(offline[ , c("mac", "channel", "scanMac")],
as.factor))
# eliminate posZ since all values = 0, measurements only taken on 1st floor.
# eliminate scanMac since there is only one value
offline = offline[ , !(names(offline) %in% c("scanMac", "posZ"))]
# check for 8 values for orientation angle should be every 45
length(unique(offline$orientation))
# examine distribution of orientation
#png(filename = "Geo_ECDFOrientation.png", width = 800, height = 679, units="px", res=100)
plot(ecdf(offline$orientation), main = "Figure 1: Empirical CDF of Orientation \nfor the Hand-Held Device", ylab = "Empirical CDF", xlab = "orientation", axes=FALSE)
axis(side = 1, at = seq(0, 360, by = 45))
axis(2)
box()
## code block 4
png(filename = "Geo_ECDFOrientation.png", width = 480, height = 300, units="px", res=300)
#oldPar = par(mar = c(4, 4, 1, 1))
par(oldPar)
oldPar = par(mar = c(4, 4, 1, 1))
options(digits = 2)
txt = readLines("offline.final.trace.txt")
#use substr function to locate lines that begin with # and tally them
sum(substr(txt, 1, 1) == "#")
paste("Number of lines that begin with #: ",sum(substr(txt, 1, 1) == "#"))
paste("Number of lines in offline file: ",length(txt))
#####################################
##    Begin data cleaning step     ##
#####################################
# evaluate how semi-colon splits 4th line of data file (first line that's not a comment)
print("Output of strsplit on 4th line below")
strsplit(txt[4], ";")[[1]]
# split data at a ; or = or , character
tokens = strsplit(txt[4], "[;=,]")[[1]]
# print first 10 elements of variable, tokens that give info about handheld device
tokens[1:10]
# extract values of the variables
tokens[c(2, 4, 6:8, 10)]
# review remaining values in split vector
tokens[ - ( 1:10 ) ]
# create matrix
tmp = matrix(tokens[ - (1:10) ], ncol = 4, byrow = TRUE)
mat = cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp),
ncol = 6, byrow = TRUE),
tmp)
# confirm dimensions of matrix
dim(mat)
# create function processLine to repeat for all rows in txt
processLine =
function(x)
{
tokens = strsplit(x, "[;=,]")[[1]]
tmp = matrix(tokens[ - (1:10) ], ncol = 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp),
ncol = 6, byrow = TRUE), tmp)
}
# apply function to txt
tmp = lapply(txt[4:20], processLine)
# determine # of signals detected at each point
sapply(tmp, nrow)
# create offline dataframe
offline = as.data.frame(do.call("rbind", tmp))
dim(offline)
# discard lines beginning with # because they are comments
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
# revised function to discard observations with no signal detected
processLine = function(x)
{
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], , 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
options(error = recover, warn = 1)
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors = FALSE)
dim(offline)
## code block 2
dim(offline)
# name variables
names(offline) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal",
"channel", "type")
# convert time, position, signal to numeric
numVars = c("time", "posX", "posY", "posZ",
"orientation", "signal")
offline[ numVars ] =  lapply(offline[ numVars ], as.numeric)
# drop adhoc measurements
offline = offline[ offline$type == "3", ]
# remove type variable from df offline
offline = offline[ , "type" != names(offline) ]
# 1181628 in old offline, 978443 records left
dim(offline)
# convert milliseconds to date-times
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
## code block 3
# check variable types
unlist(lapply(offline, class))
summary(offline[, numVars])
# convert character variables to factors
summary(sapply(offline[ , c("mac", "channel", "scanMac")],
as.factor))
# eliminate posZ since all values = 0, measurements only taken on 1st floor.
# eliminate scanMac since there is only one value
offline = offline[ , !(names(offline) %in% c("scanMac", "posZ"))]
# check for 8 values for orientation angle should be every 45
length(unique(offline$orientation))
# examine distribution of orientation
#png(filename = "Geo_ECDFOrientation.png", width = 800, height = 679, units="px", res=100)
plot(ecdf(offline$orientation), main = "Figure 1: Empirical CDF of Orientation \nfor the Hand-Held Device", ylab = "Empirical CDF", xlab = "orientation", axes=FALSE)
axis(side = 1, at = seq(0, 360, by = 45))
axis(2)
box()
## code block 4
png(filename = "Geo_ECDFOrientation.png", width = 480, height = 300, units="px", res=300)
#oldPar = par(mar = c(4, 4, 1, 1))
par(oldPar)
## code block 5
#pdf(file = "Geo_DensityOrientation.pdf", width = 10, height = 5)
oldPar = par(mar = c(4, 4, 1, 1))
dev.new(width=5, height=4, unit="in")
plot(density(offline$orientation, bw = 2),
xlab = "orientation", main = "Figure 4: Density Plot for Orientation Angle", axes=FALSE)
axis(side = 1, at = seq(0, 360, by = 45))
axis(2)
box()
par(oldPar)
# round the angles closest to the 8 orientations that are multiples of 45 degrees.
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
offline$angle = roundOrientation(offline$orientation)
#pdf(file = "Geo_BoxplotAngle.pdf", width = 10)
oldPar = par(mar = c(4, 4, 1, 1))
with(offline, boxplot(orientation ~ angle, xlab = "nearest 45 degree angle", ylab = "orientation", main="Figure 4: Boxplots of Orientation for the Hand-Held Device"))
par(oldPar)
c(length(unique(offline$mac)), length(unique(offline$channel)))
table(offline$mac)
subMacs = names(sort(table(offline$mac), decreasing = TRUE))[1:7]
offline = offline[ offline$mac %in% subMacs, ]
macChannel = with(offline, table(mac, channel))
apply(macChannel, 1, function(x) sum(x > 0))
c(length(unique(offline$mac)), length(unique(offline$channel)))
table(offline$mac)
subMacs = names(sort(table(offline$mac), decreasing = TRUE))[1:7]
offline = offline[ offline$mac %in% subMacs, ]
macChannel = with(offline, table(mac, channel))
apply(macChannel, 1, function(x) sum(x > 0))
sum(sapply(locDF, is.null))
sum(sapply(locDF, is.null))
offline$angle = roundOrientation(offline$orientation)
#pdf(file = "Geo_BoxplotAngle.pdf", width = 10)
oldPar = par(mar = c(4, 4, 1, 1))
with(offline, boxplot(orientation ~ angle, xlab = "nearest 45 degree angle", ylab = "orientation", main="Figure 4: Boxplots of Orientation for the Hand-Held Device"))
par(oldPar)
c(length(unique(offline$mac)), length(unique(offline$channel)))
table(offline$mac)
subMacs = names(sort(table(offline$mac), decreasing = TRUE))[1:7]
offline = offline[ offline$mac %in% subMacs, ]
macChannel = with(offline, table(mac, channel))
apply(macChannel, 1, function(x) sum(x > 0))
offline = offline[ , "channel" != names(offline)]
locDF = with(offline,
by(offline, list(posX, posY), function(x) x))
length(locDF)
sum(sapply(locDF, is.null))
locDF = locDF[ !sapply(locDF, is.null) ]
length(locDF)
locCounts = sapply(locDF, nrow)
locCounts = sapply(locDF,
function(df)
c(df[1, c("posX", "posY")], count = nrow(df)))
class(locCounts)
dim(locCounts)
locCounts[ , 1:8]
locCounts = t(locCounts)
plot(locCounts, type = "n", xlab = "", ylab = "")
text(locCounts, labels = locCounts[,3], cex = .8, srt = 45)
par(oldPar)
